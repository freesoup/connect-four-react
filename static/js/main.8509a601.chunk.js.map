{"version":3,"sources":["index.js"],"names":["Square","props","className","value","Column","row","col","this","squares","onClick","renderSquare","React","Component","Board","renderColumn","Game","state","history","Array","fill","map","playRow","playCol","gameIsWon","winner","stepNumber","xIsNext","rowLanded","slice","current","length","i","dummyRow","dummyCol","player","count","j","sum","calculateWinner","setState","concat","step","gameIsDraw","status","moves","move","location","desc","jumpTo","nextPlayerIndicator","push","handleClick","class","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8509a601.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <div><button className={`square ${!props.value ? \"squareDefault\" : props.value==='X' ? \"squarePlayerX\" : \"squarePlayerO\"}`}>\r\n    </button></div>\r\n  );\r\n}\r\n\r\nclass Column extends React.Component {\r\n  renderSquare(row, col) {\r\n    return (\r\n      <Square \r\n        value={this.props.squares[col][row]}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board-col\"  onClick={this.props.onClick}>\r\n          {this.renderSquare(5, this.props.value)}\r\n          {this.renderSquare(4, this.props.value)}\r\n          {this.renderSquare(3, this.props.value)}\r\n          {this.renderSquare(2, this.props.value)}\r\n          {this.renderSquare(1, this.props.value)}\r\n          {this.renderSquare(0, this.props.value)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderColumn(col) {\r\n    return (\r\n      <Column\r\n        value={col}\r\n        onClick={() => this.props.onClick(col)}\r\n        squares={this.props.squares}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board-container\">\r\n        {this.renderColumn(0)}\r\n        {this.renderColumn(1)}\r\n        {this.renderColumn(2)}\r\n        {this.renderColumn(3)}\r\n        {this.renderColumn(4)}\r\n        {this.renderColumn(5)}\r\n        {this.renderColumn(6)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      history: [{\r\n        squares: Array(7).fill(null).map(() => Array(6).fill(null)),\r\n        playRow: null,\r\n        playCol: null,\r\n        gameIsWon: false,\r\n        winner: null,\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    }\r\n  }\r\n\r\n  handleClick(col) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    var squares = [];\r\n    for (let i = 0; i < current.squares.length; i++) {\r\n      squares[i] = current.squares[i].slice();\r\n    }\r\n    let rowLanded;\r\n    if (current.gameIsWon || squares[col][squares[col].length-1] != null) {\r\n      return;\r\n    }\r\n    \r\n\r\n    for (let i = 0; i < squares[col].length ;i++) {\r\n      if (squares[col][i] === null) {\r\n        squares[col][i] = this.state.xIsNext ? 'X' : 'O';\r\n        rowLanded = i;\r\n        break;\r\n      } \r\n    }\r\n\r\n    let winner = calculateWinner(squares, rowLanded, col);\r\n    let gameIsWon = winner ? true : false\r\n    \r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        playRow: rowLanded,\r\n        playCol: col,\r\n        gameIsWon: gameIsWon,\r\n        winner: winner\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    let winner;\r\n    let gameIsDraw;\r\n\r\n    if (current.gameIsWon) {\r\n      winner = current.winner;\r\n    } else if (this.state.stepNumber === 42) {\r\n      gameIsDraw = true;\r\n    }\r\n\r\n    const moves = history.map((step, move) =>  {\r\n      const desc = move ? \r\n        'Go to move #' + move :\r\n        'Go to Game start';\r\n      let location;\r\n      if (step.playRow != null && step.playCol != null) {\r\n        location = 'Location: (' + step.playRow + ',' + step.playCol + ')'\r\n      }\r\n      return (\r\n        <div className=\"history-button-container\" key={move}>\r\n          <button className={`history-button ${move === this.state.stepNumber ? 'boldbutton' : ''}`} onClick={() => this.jumpTo(move)}>{desc} {location}</button>\r\n        </div>\r\n      );\r\n    });\r\n\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner'\r\n    } else if (gameIsDraw) {\r\n      status = 'Draw'\r\n    } else {\r\n      status = 'Next Player'\r\n    }\r\n\r\n    let nextPlayerIndicator = [];\r\n\r\n    if (winner) {\r\n      nextPlayerIndicator.push(<div className={`minisquare ${winner === 'X' ? 'squarePlayerX' : 'squarePlayerO'}`}></div>)\r\n    }else if (!gameIsDraw) {\r\n      nextPlayerIndicator.push(<div className={`minisquare ${this.state.xIsNext? 'squarePlayerX' : 'squarePlayerO'}`}></div>)\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares={current.squares}\r\n            onClick={(col) => this.handleClick(col)}\r\n          />\r\n          <div className=\"game-state\">\r\n            <div class=\"game-logo\"><h1>Connect-4</h1></div>\r\n            <div class=\"game-result\">{ status }{nextPlayerIndicator}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"history-bar\">\r\n          <div className=\"history-title\"><h1>History</h1></div>\r\n          <div className=\"game-info\">\r\n            <div>{ moves }</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Check in 8 directions ffrom the row, col\r\nfunction calculateWinner(squares, row, col) {\r\n  if (row == null || col == null) {\r\n    return null;\r\n  }\r\n  let player = squares[col][row];\r\n  //vertical check\r\n  let count = 0\r\n  for (let i = 0; i < squares[col].length; i++) {\r\n    if (squares[col][i] === player) {\r\n      count++\r\n    } else {\r\n      count = 0\r\n    }\r\n\r\n    if (count === 4) {\r\n      return player\r\n    }\r\n  }\r\n\r\n  //horizontal check\r\n  count = 0\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i][row] === player) {\r\n      count++\r\n    } else {\r\n      count = 0\r\n    }\r\n\r\n    if (count === 4) {\r\n      return player\r\n    }\r\n  }\r\n\r\n  //ascending diagonal check\r\n  count = 0;\r\n  let dummyRow;\r\n  let dummyCol;\r\n  if (row >= col) {\r\n    dummyRow = row - col;\r\n    dummyCol = 0;\r\n  } else {\r\n    dummyRow = 0;\r\n    dummyCol = col - row;\r\n  }\r\n  for (let i = dummyCol, j = dummyRow; i < squares.length && j < squares[i].length; i++, j++) {\r\n    if (squares[i][j] === player) {\r\n      count++\r\n    } else {\r\n      count = 0\r\n    }\r\n\r\n    if (count === 4) {\r\n      return player\r\n    }\r\n  }\r\n\r\n\r\n  //descending diagonal check\r\n  count = 0;\r\n  let sum = row + col;\r\n  if (sum <= squares[col].length) {\r\n    dummyRow = sum;\r\n    dummyCol = 0;\r\n  } else {\r\n    dummyRow = squares[col].length;\r\n    dummyCol = sum-dummyRow;\r\n  }\r\n  for (let i = dummyCol, j = dummyRow; i < squares.length && j >= 0; i++, j--) {\r\n    if (squares[i][j] === player) {\r\n      count++\r\n    } else {\r\n      count = 0\r\n    }\r\n\r\n    if (count === 4) {\r\n      return player\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}